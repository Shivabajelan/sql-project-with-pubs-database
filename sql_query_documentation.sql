-- Q1. Get the title of each book and the name of its publisher
select t.title, p.pub_name
from titles t
inner join publishers p on p.pub_id = t.pub_id

-- Retrieve all book titles along with their publisher names
-- Include books even if they do not have a matching publisher
select t.title, p.pub_name
from titles t
left join publishers p on p.pub_id = t.pub_id

-- Retrieve all publisher names along with their associated book titles
-- Include all publishers, even those without any books
select t.title, p.pub_name
from titles t
right join publishers p on p.pub_id = t.pub_id

-- Retrieve publisher names that are not associated with any book titles
-- by performing a FULL JOIN and filtering for rows where 'title_id' is NULL
-- We’re using this condition to find publishers who do not have any books listed in the titles table.
select t.title, p.pub_name
from titles t
full join publishers p on p.pub_id = t.pub_id
where t.title_id is null


-- Q2. Retrieve the first and last names of authors along with the titles they have written
-- We're linking the authors to titles through the bridge table titleauthor, which handles the many-to-many relationship
select a.au_fname, a.au_lname, t.title
from authors a
inner join titleauthor ta on ta.au_id = a.au_id
inner join titles t on t.title_id = ta.title_id

-- Q3. Retrieve the first and last names of authors along with the names of the publishers of their books
select a.au_fname, a.au_lname, p.pub_name
from authors a
inner join titleauthor ta on ta.au_id = a.au_id
inner join titles t on t.title_id = ta.title_id
inner join publishers p on p.pub_id = t.pub_id

-- Q4. Count the total number of authors in the 'authors' table
select COUNT(au_id) as 'authors count'
from authors a

-- Q5.Count the number of unique authors who have written at least one valid (non-null) book title
select count(distinct a.au_id) as 'distinct authors count'
from authors a
full join titleauthor ta on ta.au_id = a.au_id
full join titles t on t.title_id = ta.title_id
where t.title is not null

-- As joins are very slow when it comes to big data, a faster way is as bellow.
-- It will give the same result as above and improve performance
select count(distinct au_id) as 'distinct authors count'
from titleauthor ta



-- Q6.Count the number of sales transactions (rows) for each book (title_id)
-- regardless of how many copies were sold in each transaction 
select s.title_id, count(s.qty) as "total_transactions"
from sales as s
group by s.title_id



-- Calculate the total number of copies sold for each book (title_id)
-- by summing the quantity sold in each transaction
select s.title_id, sum(s.qty) as "total_copies_sold"
from sales as s
group by s.title_id



-- Q7.Retrieve each book title along with the total number of copies sold
select t.title, sum(s.qty) as total_copies_sold
from titles as t
left join sales as s on s.title_id = t.title_id
group by t.title



-- Retrieve each book title along with the total number of copies sold
-- Use a LEFT JOIN to include all titles, even those without any sales
-- Replace NULL sales values with 0 using COALESCE
-- Group the results by title and sort them in descending order of total copies sold
select t.title, COALESCE(sum(s.qty), 0) as total_copies_sold
from titles as t
left join sales as s on s.title_id = t.title_id
group by t.title
order by total_copies_sold desc



-- Q9.calculates the total sales revenue for each book title.
select t.title, sum(s.qty*t.price) as total_revenue
from titles as t
inner join sales as s on s.title_id = t.title_id
group by t.title



-- Q9-1.calculates the total sales revenue for each book title.
-- Note:This method assumes the price is consistent for each title, otherwise it may lead to inaccurate totals.
select t.title, sum(s.qty)*t.price as total_revenue
from titles as t
inner join sales as s on s.title_id = t.title_id
group by t.title, t.price



-- Q10.Calculates the total revenue generated by each publisher. Make sure to list all 8 publishers
-- "left join" ensures all publishers are included — even if they have no titles or no sales.
select p.pub_name, isnull(sum(t.price*s.qty), 0) as publisher_total_revenue
from publishers as p
left join titles as t on t.pub_id = p.pub_id
left join sales as s on s.title_id = t.title_id
group by p.pub_name




-- Q11.Retrieve each author's last name along with the number of titles they've contributed to
select a.au_lname, count(ta.title_id) as total_titles
from authors as a
join titleauthor as ta on ta.au_id = a.au_id
group by a.au_lname, a.au_id

--"Derived Tables"
--Q11-1.Retrieve each author's last name along with the number of titles they've contributed to using "Derived Tables"
-- by using a subquery to count titles per author from the titleauthor table
-- and joining it with the authors table.
--Comparing these two queries indicates that using "Derived Table" is much faster than just simply use the "join"
select a.au_lname, k.total_titles
from authors as a
inner join (select au_id, count(title_id) as total_titles
			from titleauthor
			group by au_id) as k on k.au_id = a.au_id


----------------------------------------------------------------how cross check our queries------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------
select sum(k.tp)
from(select a.au_fname,a.au_lname,sum(t.price * s.qty) tp
	from authors a
	inner join titleauthor ta on ta.au_id = a.au_id
	inner join titles t on t.title_id = ta.title_id
	inner join sales s on s.title_id = t.title_id
	group by a.au_fname,a.au_lname,a.au_id
	)k--10609.10


select sum(qty*price)
from sales s 
inner join titles t on t.title_id = s.title_id--6676.90

select * from titleauthor order by title_id


select a.au_fname,a.au_lname,a.au_id,t.title_id,s.ord_num,s.qty*t.price*royaltyper/100
from authors a
inner join titleauthor ta on ta.au_id = a.au_id
inner join titles t on t.title_id = ta.title_id
inner join sales s on s.title_id = t.title_id
where ord_num = '6871'

-----Correct Answer-------
---Q12.Join authors, titleauthor, titles, and sales tables to prepare a dataset 
-- that links authors with their book sales. Grouped by author's full name and ID.
from authors a
inner join titleauthor ta on ta.au_id = a.au_id
inner join titles t on t.title_id = ta.title_id
inner join sales s on s.title_id = t.title_id
group by a.au_fname,a.au_lname,a.au_id
-------------

-- Calculate the total royalty paid across all authors.
-- Step 1: Join authors, titleauthor, titles, and sales to compute royalty per author
--         using (price * quantity sold * royalty percentage).
-- Step 2: Sum all individual royalties to get the grand total.
select sum(k.tp) 
from
(select a.au_fname,a.au_lname,sum(t.price * s.qty * ta.royaltyper / 100) tp
from authors a
inner join titleauthor ta on ta.au_id = a.au_id
inner join titles t on t.title_id = ta.title_id
inner join sales s on s.title_id = t.title_id
group by a.au_fname,a.au_lname,a.au_id)k --Expected total: 6676.90

----------------------------------------------------------------how cross check our queries------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------

--Q13. Retrieve the titles that have generated more than $500 in total sales revenue,
-- by joining sales and titles tables, summing (price * quantity), and filtering using HAVING.
select t.title, sum(t.price*s.qty) as total_revenue
from sales as s
inner join titles as t on t.title_id = s.title_id
group by t.title, t.title_id
having sum(t.price*s.qty) > 500



--Q14.-- Find the first name and the last name of authors who have contributed to more than one title
--Comment:This query joins authors with titleauthor to count the number of titles each author has contributed to, then filters to show only those with more than one title.
select a.au_fname,a.au_lname,count(ta.title_id) as number_of_titles
from authors as a
inner join titleauthor as ta on ta.au_id = a.au_id
group by a.au_fname,a.au_lname, a.au_id
having count(ta.title_id) > 1




--Q14-1. Optimised version using a derived table to pre-filter authors with more than one title
--Comment: This version uses a derived table (a subquery in the FROM clause) to first filter out authors who have only one title, 
--reducing the number of rows joined with the authors table — which can improve performance in large datasets.
select a.au_fname, a.au_lname, k.number_of_titles
from authors as a
inner join	(select au_id, count(title_id) as number_of_titles
			from titleauthor 
			group by au_id
			having count(title_id) >1 ) as k on k.au_id = a.au_id


--Sub Query type 1
--Q15.Find the title(s) with the highest price from the titles table
--The inner query (select max(price) from titles) gets the maximum price of all titles.
--The outer query returns the title(s) that match that price.
--If multiple titles share the same highest price, all of them will be returned.
select title
from titles
where price = (select max(price) from titles)

















select a.au_fname,a.au_lname,ta.title_id
from authors as a
inner join titleauthor as ta on ta.au_id = a.au_id













--Q16.
select t.title, t.price
from titles as t
order by t.price desc

--	offfset syntax example
select *
from titles
order by title_id
offset 0 rows
fetch first 5 rows only

--Q17. using oofset
select title, price
from titles
where price = (select min(k.price) as min_price
				from (select distinct price
						from titles
						order by price desc
						offset 0 rows
						fetch first 5 rows only
					) as k
				)

--Q17-1. using top5
select title, price
from titles
where price = (select min(k.price) as min_price
				from (select distinct top 5 price
						from titles
						order by price desc
					) as k
				)

select *
from titles
--Q18.subquery type 2
select title, price, (select avg(price) from titles)  as overal_avg_price, price - (select avg(price) from titles) as diff
from titles
group by title, price, title_id 

--Q18.subquery type 2 is very slow. Use cross join instead of it.
select t.title, t.price, k.av, price - k.av diff
from titles t
cross join (select avg(price) av from titles) k
